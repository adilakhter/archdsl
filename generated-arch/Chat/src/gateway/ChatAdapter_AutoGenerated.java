package gateway;
import edu.uci.isr.myx.fw.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

public abstract class ChatAdapter_AutoGenerated extends  AbstractMyxSimpleBrick implements IMyxDynamicBrick { 
    //generated end-point MYX NAME
    public static final IMyxName INTERFACE_NAME_OUTGOING_chat =  MyxUtils.createName("chat");
    public static final IMyxName INTERFACE_NAME_INCOMING_in =  MyxUtils.createName("in");
    
            
             
    //generated endpoints
    protected ArrayList<IChat> chatOutgoingEndpointImplementations;
    protected IChatEv inIncomingEndpointImplementation;
    
    
    public ChatAdapter_AutoGenerated(){
        this.chatOutgoingEndpointImplementations = new ArrayList<IChat>(); 
        
    }
             
    public void init(){
        
        this.inIncomingEndpointImplementation = get_inIncomingEndpointImplementation();
        verifyIsNotNull("inIncomingEndpointImplementation" , inIncomingEndpointImplementation); 
        
    }
    
    //incoming end-points setup methods
    
    /**
     * Gets and initialises inIncomingEndpointImplementation endpoint's concrete implementation   
     * so that it can be returned by the getServiceObject.
     * By default inIncomingEndpointImplementation , which cause RuntimeException
     * if not properly initialized. 
     */
     protected abstract IChatEv get_inIncomingEndpointImplementation();
    
    
    protected <T> void configureIncomingEndpoint(T incomingInterface)
    {
         AtomicReference<T> ref =  new AtomicReference<T>(incomingInterface);
         configureIncomingEndpoint(ref);
         incomingInterface = ref.get();
    }
      
    protected <T> void verifyIsNotNull(String interaceNameString, T interfaceImplementation)
    {
        if  ( interfaceImplementation  == null)
             throw new RuntimeException (interaceNameString + " is Null. Please assign your implementation by overriding configureIncomingEndpoint method." ); 
    }       
    
    
    
    protected void OnConnectingWith_chatOutgoingEndpointImplementations()
    {
       /*Implementing additional logic while connecting with the   
        *end-point : chatOutgoingEndpointImplementations of type : IChat 
        * */
    }    
    
    protected void OnDisconnectingWith_chatOutgoingEndpointImplementations()
    {
        /*Implementing additional logic while disconnecting with the   
         *end-point : chatOutgoingEndpointImplementations of type : IChat
         * */
    }
    
    protected void OnDisconnectedingWith_chatOutgoingEndpointImplementations()
    {
        /*Implementing additional logic while disconnected with the   
         *end-point : chatOutgoingEndpointImplementations of type : IChat
         * */
    }    
    
     
    @Override
    public void interfaceConnected(IMyxName interfaceName, Object serviceObject) {
        // (Auto-generated) :  
        // Simulating Synchronous Proxy behavior
        
        if(interfaceName.equals(INTERFACE_NAME_OUTGOING_chat))
        {
            if(chatOutgoingEndpointImplementations != null)
            { 
              chatOutgoingEndpointImplementations.add((IChat)serviceObject);
            }
        }           
        
    }
            
    @Override
    public void interfaceDisconnected(IMyxName interfaceName, Object serviceObject) {
        // (Auto-generated) :  
        // Simulating Synchronous Proxy behavior 
    }
    
    @Override
    public void interfaceDisconnecting(IMyxName interfaceName, Object serviceObject) {
        // (Auto-generated) :  
        // Simulating Synchronous Proxy behavior
        
        if(interfaceName.equals(INTERFACE_NAME_OUTGOING_chat))
        { 
           if(chatOutgoingEndpointImplementations != null)
            { 
              chatOutgoingEndpointImplementations.remove(serviceObject);
            } 
        }
        
    }
    
    @Override
    public Object getServiceObject(IMyxName name) {
	   // TODO (Auto-generated): Add your code here
	   
	   if(name.equals(INTERFACE_NAME_INCOMING_in)){
	     if(inIncomingEndpointImplementation == null){
	         throw new RuntimeException("inIncomingEndpointImplementation is Null . Please initialize in_Impl with Service(/ServiceProxy) .");
	     }
	     return inIncomingEndpointImplementation;
	   } 
	   
	   return null;
    }
}
