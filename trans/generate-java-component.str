module generate-java-component

imports
     libstratego-lib
     libstratego-gpp
     libstratego-aterm 
     include/ArchDSL
     generate-java-common
     generate-java  
rules
    
    to-java-abstractcomponent-string: 
        ComponentDef(name, None(), params, endpoints*) 
        -> 
        $[package [package-name-string];
                
import edu.uci.isr.myx.fw.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

public abstract class [className]_AutoGenerated extends  AbstractMyxSimpleBrick{ 
    //generated end-point MYX NAME
    [endpoints-myx-name-stmt*]
    //generated end-point instances
    [endpoints-interface-decl-stmt*]
         
    public [className]_AutoGenerated(){
        //(Auto-generated):  Default constructor
        [get-endpoint-init*]
        [configure-incoming-endoints*]
    }
    
    public [className]_AutoGenerated(Properties props){
        //TODO (Auto-generated):   constructor
    }
    
    @SuppressWarnings("unchecked")
    private <T>  void configureOutgoingEndpoint(IMyxName myxName, ArrayList<T> endpointImpls)
    {
        Object $[$$]$ objs = MyxUtils.getRequiredServiceObjects(this, myxName);
        if ( objs != null)
        {   
            for ( Object obj : objs)
            {
                endpointImpls.add((T)obj);
            }
        }
    }
    //incoming end-points setup methods
    [generate-abstractmethod-for-incoming-endpoint*]
    
    protected <T> void verifyIsNotNull(String interaceNameString, T interfaceImplementation)
    {
        if  ( interfaceImplementation  == null)
            throw new RuntimeException (interaceNameString + " is Null. Please assign your implementation by overriding configureIncomingEndpoint method." ); 
    }
     
    @Override
    public void begin(){
        //TODO (Auto-generated):  Add initialization codes
        [configure-outgoing-endpoint*]
        
    }
    @Override
    public void end(){
        //(Auto-generated): Add cleanup codes
        //(Auto-generated): Dispose unmanaged resources
    }
    
    @Override
    public Object getServiceObject(IMyxName name) {
        //(Auto-generated): Add your code here
        [endpoint-return-stmt*]
        return null;
    }
}
]
    where
            (package-name-parts-temp, className) :=   <string-tokenize(|['.']);split-init-last>name
    where 
            if (<eq> (package-name-parts-temp, [])) then
                package-name-parts:= [<get-base-namespace>]
            else 
                package-name-parts:= package-name-parts-temp
            end
    where package-name-string := <separate-by(|".");concat-strings>package-name-parts
    where endpoints-myx-name-stmt* := <filter(to-java-endpoints)>endpoints*
    where endpoints-interface-decl-stmt* := <filter(to-java-endpoint-instances)>endpoints*
    where endpoint-return-stmt* := <filter(to-java-incomingendpoint-return-stmt)>endpoints*
    where configure-incoming-endoints* := <filter(to-java-setup-incomingendpoints)>endpoints*
    where configure-outgoing-endpoint* := <filter(to-java-setup-outgoingendpoints)>endpoints*
    where get-endpoint-init* := <filter(to-java-endpoint-instantiation-stmt)>endpoints*
    where generate-abstractmethod-for-incoming-endpoint* := <filter(to-java-abstractmethod-for-incoming-endpoint)>endpoints*
    
    
   /*
    * Generate concrete implementation for Myx Component. This class can be customized by enduser.
    * Hence, This class is only generated if it does not exists already
    **/
    to-java-concretecomponent-string: 
        ComponentDef(name, None(), params, endpoints*) 
        ->$[package [package-name-string];       
        
import java.util.Properties;
import java.util.concurrent.atomic.AtomicReference;

public  class [className] extends  [className]_AutoGenerated {

    public [className]()
    {   
        //TODO Additional initialization
    }
    
    public [className](Properties props)
    {
        super ( props);
        //TODO Additional initialization
    }
    
    @Override
    public void begin()
    {
        super.begin();
        
        //TODO : Additional logic
    }
    
    @Override
    public void end()
    {
        super.end();
        
        //TODO : Additional logic
    }
    
    [configureIncomingEndpoint-method-stmt*]
   
}
]
    where
            (package-name-parts-temp, className) :=   <string-tokenize(|['.']);split-init-last>name
    where 
            if (<eq> (package-name-parts-temp, [])) then
                package-name-parts:= [<get-base-namespace>]
            else 
                package-name-parts:= package-name-parts-temp
            end
	 where package-name-string := <separate-by(|".");concat-strings>package-name-parts
	 where root-package-name := <head>package-name-parts
	 where configureIncomingEndpoint-method-stmt* :=  <filter(to-java-concretemethod-for-incoming-endpoint)>endpoints*
