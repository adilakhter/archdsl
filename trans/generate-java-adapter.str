module generate-java-adapter

imports
     libstratego-lib
     libstratego-gpp
     libstratego-aterm 
     include/ArchDSL
     generate-java-common
     generate-java
rules
     // code generation of Adapters
    to-java-concreteadapter-string: 
        AdapterDef(name, None(), params, endpoints*) 
        -> $[package [package-name-string];
               
import java.util.concurrent.atomic.AtomicReference;
public  class [className] extends  [className]_AutoGenerated 
{
    public [className]()
    {   
        super();
        //TODO Additional initialization
    }
    
    @Override
    public void init()
    {
        super.init();
        //TODO : Additional logic
    }
    
    [configureIncomingEndpoint-method-stmt*]
    
    [communication-extension-points*]
}
]
     where
            (package-name-parts-temp, className) :=   <string-tokenize(|['.']);split-init-last>name
            ; fNameWithoutExtension  := className
     where 
            if (<eq> (package-name-parts-temp, [])) then
                package-name-parts:= [<get-base-namespace>]
            else 
                package-name-parts:= package-name-parts-temp
            end
     where package-name-string := <separate-by(|".");concat-strings>package-name-parts
     where root-package-name := <head>package-name-parts
     where configureIncomingEndpoint-method-stmt* :=  <filter(to-java-concretemethod-for-incoming-endpoint)>endpoints*
     where communication-extension-points* := <filter(to-adapter-connection-extension(|"@Override"))>endpoints*
 
         
    to-java-abstractadapter-string: 
        AdapterDef(name, None(), params, endpoints*) -> 
        $[package [package-name-string];
import edu.uci.isr.myx.fw.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

public abstract class [className]_AutoGenerated extends  AbstractMyxSimpleBrick implements IMyxDynamicBrick { 
    //generated end-point MYX NAME
    [endpoints-myx-name-stmt*]
            
             
    //generated endpoints
    [endpoints-interface-decl-stmt*]
    
    public [className]_AutoGenerated(){
        [get-endpoint-init*]
    }
             
    public void init(){
        [configure-endoints-stmt*]
    }
    
    //incoming end-points setup methods
    [generate-abstractmethod-for-incoming-endpoint*]
    
    protected <T> void configureIncomingEndpoint(T incomingInterface)
    {
         AtomicReference<T> ref =  new AtomicReference<T>(incomingInterface);
         configureIncomingEndpoint(ref);
         incomingInterface = ref.get();
    }
      
    protected <T> void verifyIsNotNull(String interaceNameString, T interfaceImplementation)
    {
        if  ( interfaceImplementation  == null)
             throw new RuntimeException (interaceNameString + " is Null. Please assign your implementation by overriding configureIncomingEndpoint method." ); 
    }       
    
    [communication-extension-points*]
     
    @Override
    public void interfaceConnected(IMyxName interfaceName, Object serviceObject) {
        // (Auto-generated) :  
        // Simulating Synchronous Proxy behavior
        [adapterConnectingStmt*]
    }
            
    @Override
    public void interfaceDisconnected(IMyxName interfaceName, Object serviceObject) {
        // (Auto-generated) :  
        // Simulating Synchronous Proxy behavior 
    }
    
    @Override
    public void interfaceDisconnecting(IMyxName interfaceName, Object serviceObject) {
        // (Auto-generated) :  
        // Simulating Synchronous Proxy behavior
        [adapterDisconnectingStmt*]
    }
    
    @Override
    public Object getServiceObject(IMyxName name) {
	   // TODO (Auto-generated): Add your code here
	   [serviceReturnStml*]
	   return null;
    }
}
       ]
    where
            (package-name-parts-temp, className) :=   <string-tokenize(|['.']);split-init-last>name
    where 
            if (<eq> (package-name-parts-temp, [])) then
                package-name-parts:= [<get-base-namespace>]
            else 
                package-name-parts:= package-name-parts-temp
    end
    where package-name-string := <separate-by(|".");concat-strings>package-name-parts
    where endpoints-myx-name-stmt* := <filter(to-java-endpoints)>endpoints*
    where endpoints-interface-decl-stmt* := <filter(to-java-endpoint-instances)>endpoints*
    where get-endpoint-init* := <filter(to-java-endpoint-instantiation-stmt)>endpoints*
    where configure-endoints-stmt* := <filter(to-java-setup-gateway-endpoints)>endpoints*
    where serviceReturnStml* := <filter(to-java-incomingendpoint-return-stmt)>endpoints*
    where generate-abstractmethod-for-incoming-endpoint* := <filter(to-java-abstractmethod-for-incoming-endpoint)>endpoints*
    where adapterDisconnectingStmt* := <filter(to-java-adapter-disconnecting-stmt)>endpoints*
    where adapterConnectingStmt* := <filter(to-java-adapter-connecting-stmt)>endpoints*
    where communication-extension-points* := <filter(to-adapter-connection-extension(|""))>endpoints*
    
    to-java-adapter-disconnecting-stmt: 
          EndPointDef(_,Outgoing(), type , name ) 
          -> $[ 
              if(interfaceName.equals(INTERFACE_NAME_OUTGOING_[name]))
              { 
                 if([name]OutgoingEndpointImplementations != null)
                  { 
                    [name]OutgoingEndpointImplementations.remove(serviceObject);
                  } 
              }
             ]
    
    to-java-adapter-disconnecting-stmt: 
          EndPointDef(isRequired,Inout(), type , name ) 
          -><to-java-adapter-disconnecting-stmt>EndPointDef(isRequired,Outgoing(), type , name )
                                                                                                                                                                      
      
    to-java-adapter-connecting-stmt: 
          EndPointDef(_,Outgoing(), type , name ) 
          -> $[ 
              if(interfaceName.equals(INTERFACE_NAME_OUTGOING_[name]))
              {
                  if([name]OutgoingEndpointImplementations != null)
                  { 
                    [name]OutgoingEndpointImplementations.add(([type])serviceObject);
                  }
              }           
              ]
      
    to-java-adapter-connecting-stmt: 
          EndPointDef(isRequired,Inout(), type , name ) 
          -> <to-java-adapter-connecting-stmt> EndPointDef(isRequired,Outgoing(), type , name )
          
    
    to-adapter-connection-extension(|maycontainOverrideAnnotation):
        EndPointDef(isRequired,Outgoing(), type , name )->
       $[
        [maycontainOverrideAnnotation]
        protected void OnConnectingWith_[name]OutgoingEndpointImplementations()
        {
           /*Implementing additional logic while connecting with the   
            *end-point : [name]OutgoingEndpointImplementations of type : [type] 
            * */
        }    
        [maycontainOverrideAnnotation]
	    protected void OnDisconnectingWith_[name]OutgoingEndpointImplementations()
	    {
	        /*Implementing additional logic while disconnecting with the   
	         *end-point : [name]OutgoingEndpointImplementations of type : [type]
	         * */
	    }
        [maycontainOverrideAnnotation]
	    protected void OnDisconnectedingWith_[name]OutgoingEndpointImplementations()
	    {
	        /*Implementing additional logic while disconnected with the   
	         *end-point : [name]OutgoingEndpointImplementations of type : [type]
	         * */
	    }    
        ]
    
     to-adapter-connection-extension: 
          EndPointDef(isRequired,Inout(), type , name ) 
          -> <to-adapter-connection-extension> EndPointDef(isRequired,Outgoing(), type , name )
    
       
        
        
      