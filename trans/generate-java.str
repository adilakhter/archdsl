module generate-java

imports
     libstratego-lib
     libstratego-gpp
     libstratego-aterm 
     include/ArchDSL
     generate-java-component
     generate-java-common
     generate-java-adapter
     generate-java-endpoint
     
strategies
   generate-java:
    (selected, position, ast, path, project-path) -> None()
        with 
            root := <getcwd>
            ;<debug(!"generating java for following AST > ")>selected
            ; folder-name :=<base-filename;remove-extension>path 
        with  rules( get-base-namespace := folder-name)    
            ;create-folder(|folder-name)
            ;create-folder(|"src")  
            ;res* := <to-java>selected // java code generation starts here
            ; <debug(!"result of code generation >")>res*
            ;<filter(save-java-file)>res*
             
   rules
    to-java: Application(_ , appParts*) -> <to-java-types> appParts* 
     
    to-java-types: appParts* -> <filter(to-java-entities);flatten-list>appParts*
      
    to-java-entities: 
    	ComponentDef(name, None() , params, endpoints*) 
    	-> [(componentBaseFileName,componentBaseContent), (componentFileName,componentContent)]
        where
        (package-name-parts-temp, className) :=   <string-tokenize(|['.']);split-init-last>name
        ; fNameWithoutExtension  := className
      	where 
      	    if (<eq> (package-name-parts-temp, [])) then
                package-name-parts:= [<get-base-namespace>]
            else 
            	package-name-parts:= package-name-parts-temp
      	    end        
      	; current-dir := <getcwd> //creating the folder structure for this component
        ; <map(create-folder)>package-name-parts    
        ; create-folder(|current-dir) // cd to root folder
        ; package-name-path := <separate-by(|"\\");concat-strings>package-name-parts
        ; componentBaseContent:= <to-java-abstractcomponent-string> ComponentDef(name, None(), params, endpoints*)
      	; componentBaseFileName:=  <concat-strings>[ package-name-path , "\\" , fNameWithoutExtension , "_AutoGenerated." , "java"]
      	; componentFileName :=<concat-strings>[ package-name-path , "\\" , fNameWithoutExtension , "." , "java"]
      	; componentContent := <<file-exists>componentFileName < !"" + to-java-concretecomponent-string> ComponentDef(name, None(), params, endpoints*)
    
    to-java-entities: 
        AdapterDef(name, None(), params, endpoints*) 
        -> [(adapterBaseFileName,adapterBaseContent), (adapterFileName,adapterContent)]
        where
            (package-name-parts-temp, className) :=   <string-tokenize(|['.']);split-init-last>name
            ; fNameWithoutExtension  := className
        where 
            if (<eq> (package-name-parts-temp, [])) then
                package-name-parts:= [<get-base-namespace>]
            else 
                package-name-parts:= package-name-parts-temp
            end
        ; current-dir := <getcwd> //creating the folder structure for this component
        ; <map(create-folder)>package-name-parts    
        ; create-folder(|current-dir) // cd to root folder
        ; package-name-path := <separate-by(|"\\");concat-strings>package-name-parts   
        ; adapterBaseContent := <to-java-abstractadapter-string> AdapterDef(name, None(), params, endpoints*)
        ; adapterBaseFileName  := <concat-strings>[ package-name-path , "\\" , fNameWithoutExtension , "_AutoGenerated." , "java"]
        ; adapterFileName :=<concat-strings>[ package-name-path , "\\" , fNameWithoutExtension , "." , "java"]
        ; adapterContent := <<file-exists>adapterFileName < !"" + to-java-concreteadapter-string> AdapterDef(name, None(), params, endpoints*)
 
    to-java-entities: InterfaceDef (name, None()) -> (fName, fContent)
        where
            (package-name-parts-temp, className) :=   <string-tokenize(|['.']);split-init-last>name
            ; fNameWithoutExtension  := className
        where 
            if (<eq> (package-name-parts-temp, [])) then
                package-name-parts:= [<get-base-namespace>]
            else 
                package-name-parts:= package-name-parts-temp
            end
        ; current-dir := <getcwd> //creating the folder structure for this component
        ; <map(create-folder)>package-name-parts    
        ; create-folder(|current-dir) // cd to root folder
        ; package-name-path := <separate-by(|"\\");concat-strings>package-name-parts   
        ; fName := <concat-strings>[ package-name-path , "\\" , fNameWithoutExtension , "." , "java"]
        ; fContent := <to-java-entities-string> InterfaceDef(name, None()) 
        